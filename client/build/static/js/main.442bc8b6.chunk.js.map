{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","loading","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","error","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","myForm","React","createRef","disabled","authors","value","preventDefault","refetchQueries","query","current","reset","ref","onSubmit","submitForm","bind","type","placeholder","onChange","target","displayAuthors","title","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.442bc8b6.chunk.js","sourcesContent":["import {gql} from 'apollo-boost';\r\n\r\nconst getBooksQuery = gql`{\r\n  books{\r\n    name\r\n    id\r\n  }\r\n}`;\r\n\r\nconst getAuthorsQuery = gql`{\r\n  authors{\r\n    name\r\n    id\r\n  }\r\n}`;\r\n\r\n//using query variables for adding variable to mutation\r\nconst addBookMutation = gql`\r\n  mutation($name: String!, $genre: String!, $authorId: ID!){\r\n    addBook(name:$name, genre:$genre, authorId:$authorId){\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getBookQuery = gql`\r\n    query($id: ID){\r\n        book(id:$id){\r\n          id\r\n          name\r\n          genre\r\n          author{\r\n              id\r\n              name\r\n              age\r\n              books{\r\n                  name\r\n                  id\r\n              }\r\n          }\r\n        }\r\n    }`;\r\n\r\nexport {\r\n  getBooksQuery,\r\n  getAuthorsQuery,\r\n  addBookMutation,\r\n  getBookQuery\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport {graphql} from 'react-apollo';\r\nimport {getBookQuery} from '../queries/queries';\r\n\r\n\r\nclass BookDetails extends Component {\r\n\r\n  displayBookDetails(){\r\n      const {book} = this.props.data;\r\n\r\n      if(book && !book.loading){\r\n        return(\r\n          <div>\r\n            <h2>{book.name} </h2>\r\n            <p>{book.genre}</p>\r\n            <p>{book.author.name}</p>\r\n            <p>All books by this author</p>\r\n            <ul className=\"other-books\">\r\n              {\r\n                book.author.books.map(item =>{\r\n                  return <li key={item.id}>{item.name}</li>\r\n                })\r\n              }\r\n            </ul>\r\n          </div>\r\n        )\r\n      } else {\r\n        return ( <div> No book selected ... </div>)\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"book-details\">\r\n        {this.displayBookDetails()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getBookQuery,{\r\n  options:(props) => {\r\n    return {\r\n      variables: {\r\n        id:props.bookId\r\n      }\r\n    }\r\n  }})(BookDetails);\r\n","import React, { Component } from 'react';\r\n\r\nimport {graphql} from 'react-apollo';\r\nimport {getBooksQuery} from '../queries/queries';\r\n\r\n//components\r\nimport BookDetails from './BookDetails';\r\n\r\n\r\nclass BookList extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      selected: null\r\n    }\r\n  }\r\n\r\n  displayBooks(){\r\n      var data = this.props.data;\r\n      if(data.loading){\r\n        return  (<div> Loadings books.... </div>)\r\n      } else if ( !data.loading && data.error) {\r\n          return  (<div> Error Ocuured !.... </div>)\r\n      } else {\r\n         return data.books.map(book => {\r\n          return(<li key={book.id} onClick={(e) => {this.setState({selected: book.id})}}>{book.name}</li>);\r\n        });\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ul id=\"book-list\">\r\n          {this.displayBooks()}\r\n        </ul>\r\n\r\n        <BookDetails  bookId={this.state.selected}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);\r\n","import React, { Component } from 'react';\r\n\r\nimport {graphql, compose} from 'react-apollo';\r\nimport {getAuthorsQuery,addBookMutation, getBooksQuery} from '../queries/queries';\r\n\r\nclass AddBook extends Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        name:'',\r\n        genre:'',\r\n        authorId:'',\r\n        error:{}\r\n      };\r\n      this.myForm = React.createRef(); //Creating Ref\r\n  }\r\n\r\n  displayAuthors(){\r\n    var data = this.props.getAuthorsQuery;\r\n    if(data.loading){\r\n      return ( <option disabled>Loading authors ... </option>);\r\n    } else {\r\n      return data.authors.map(author => {\r\n        return (<option key={author.id} value={author.id}>{author.name } </option>);\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  submitForm(e){\r\n      e.preventDefault();\r\n      if(!this.state.name || !this.state.genre || !this.state.authorId){\r\n          this.setState({error:{\r\n            name:!this.state.name,\r\n            genre: !this.state.genre,\r\n            author: !this.state.authorId\r\n          }});\r\n          return;\r\n      }\r\n\r\n\r\n      //Adding variable to mutation so insert state data to database\r\n      this.props.addBookMutation({\r\n        variables:{\r\n          name: this.state.name,\r\n          genre: this.state.genre,\r\n          authorId: this.state.authorId\r\n        },\r\n        refetchQueries: [{query: getBooksQuery}]\r\n      });\r\n\r\n      //Initalize blank('') value to from components\r\n     this.myForm.current.reset();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form  ref={this.myForm} id='add_book' onSubmit={this.submitForm.bind(this)}>\r\n        <div className='field'>\r\n          <label> Book name: </label>\r\n          <input className={this.state.error.name ? 'error' : ''} type='text' placeholder={\"enter book  Name *\"} onChange={(e) => this.setState({name: e.target.value})}/>\r\n        </div>\r\n\r\n        <div className='field'>\r\n          <label>Genre: </label>\r\n          <input  className={this.state.error.genre ? 'error' : ''} placeholder={\"Enter book genre * \"} type='text' onChange={(e) => this.setState({genre: e.target.value})}/>\r\n        </div>\r\n\r\n        <div className='field'>\r\n          <label>Author: </label>\r\n          <select className={this.state.error.author ? 'error' : ''} onChange={(e) => this.setState({authorId: e.target.value})} >\r\n            <option>Select author </option>\r\n            {this.displayAuthors()}\r\n            </select>\r\n        </div>\r\n\r\n          <button id=\"add-book-button\" title=\"Add Book \"> {'+'} </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  graphql(getAuthorsQuery, {name:'getAuthorsQuery'}),\r\n  graphql(addBookMutation, {name:'addBookMutation'}))(AddBook);\r\n","import React, { Component } from 'react';\r\nimport ApolloClient from 'apollo-boost';\r\nimport {ApolloProvider} from 'react-apollo';\r\n//components\r\nimport BookList from './components/BookList';\r\nimport AddBook from './components/AddBook';\r\n\r\n//apollo client setup\r\nconst  client = new ApolloClient({\r\n  uri:\"https://booksstoreserver.herokuapp.com/graphql\"\r\n});\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ApolloProvider client={client}>\r\n        <div id=\"main\">\r\n            <h1>Register your Books here  </h1>\r\n            <BookList />\r\n            <AddBook />\r\n        </div>\r\n      </ApolloProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}